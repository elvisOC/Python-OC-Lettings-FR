name: CI / Build / Deploy

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - dev

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Lint, Tests & Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' 
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: 'True'
      ALLOWED_HOSTS: 'localhost,127.0.0.1'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8 pytest pytest-django
      - name: Lint
        run: flake8 .
      - name: Run tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
        run: |
          coverage run --source='.' -m pytest
          coverage report --fail-under=80

  containerize:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: elvisoc
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            elvisoc/python-oc-lettings-fr:latest
            elvisoc/python-oc-lettings-fr:${{ github.sha }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: 'False'
          ALLOWED_HOSTS: python-oc-lettings-fr-y4n6.onrender.com

  notify_sentry:
    name: Notify Sentry Release
    runs-on: ubuntu-latest
    needs: containerize
    if: github.ref == 'refs/heads/master'  
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install sentry-cli
        run: npm install @sentry/cli

      - name: Create and finalize Sentry release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          npx sentry-cli releases new ${{ github.sha }}
          npx sentry-cli releases set-commits ${{ github.sha }} --auto --ignore-missing
          npx sentry-cli releases finalize ${{ github.sha }}
          npx sentry-cli releases deploys ${{ github.sha }} new -e production

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: containerize
    if: github.ref == 'refs/heads/master'  
    steps:
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json"
